;;; -*- Mode: Emacs-Lisp -*-

;;; 
;;; RCS: $Id: neda-AT-23f,v 1.1 2009-01-04 10:54:08 mohsen Exp $
;;;

;;; ensure that the functions we want to invoke with the function keys are
;;; defined

(require 'eoe)
(require 'basic-ext)
(require 'misc-lim)
(require 'compile-ext)
(require 'bbdb-mb)			; for bbdb-complete-name-only
(require 'font-lock-ext)

(progn
  ;; emacs-19 key bindings for an IBM AT-style keyboard

  ;; =================
  ;; Top Function keys
  ;; =================
  ;;
  ;; F1
  (define-key global-map [(f1)] 'compile)
  (define-key global-map [(shift f1)] 'noop)
  (define-key global-map [(control f1)] 'noop)
  (define-key global-map [(meta f1)] 'noop)
  ;; F2
  (define-key global-map [(f2)] 'gnus-no-server)
  (define-key global-map [(shift f2)] 'vm-visit-folder)
  (define-key global-map [(control f2)] 'noop)
  (define-key global-map [(meta f2)] 'noop)
  ;; F3
  (define-key global-map [(f3)] 'compose-mail)
  (define-key global-map [(shift f3)] 'vm-visit-folder)
  (define-key global-map [(control f3)] 'noop)
  (define-key global-map [(meta f3)] 'noop)
  ;; F4
  (define-key global-map [(f4)] 'bbdb-complete-name-only)
  (define-key global-map [(shift f4)] 'bbdb-complete-address)
  (define-key global-map [(control f4)] 'bbdb-complete-just-name-only)
  (define-key global-map [(meta f4)] 'font-lock-maximum-size-cycle)
  (define-key global-map [(control meta f4)] 'noop)
  ;; F5
  (define-key global-map [(f5)] 'comint-dynamic-complete)
  (define-key global-map [(shift f5)] 'noop)
  (define-key global-map [(control f5)] 'noop)
  (define-key global-map [(meta f5)] 'noop)
  ;; F6
  (define-key global-map [(f6)] 'ispell-complete-word)
  (define-key global-map [(shift f6)] 'ispell-buffer)
  (define-key global-map [(control f6)] 'sync-cd)
  (define-key global-map [(meta f6)] 'noop)
  ;; F7
  (define-key global-map [(f7)] 'shell)
  (define-key global-map [(shift f7)] 'noop)
  (define-key global-map [(control f7)] 'noop)
  (define-key global-map [(meta f7)] 'noop)
  ;; F8
  (define-key global-map [(f8)] 'find-file)
  (define-key global-map [(shift f8)] 'find-file-other-window)
  (define-key global-map [(control f8)] 'noop)
  (define-key global-map [(meta f8)] 'noop)
  ;; F9
  (define-key global-map [(f9)] 'goto-shell-with-cd)
  (define-key global-map [(shift f9)] 'noop)
  (define-key global-map [(control f9)] 'noop)
  (define-key global-map [(meta f9)] 'noop)
  ;; F10
  (define-key global-map [(f10)] 'netscape-fetch-url-at-point)
  ;;(define-key global-map [(f10)] 'gud-raise-buffers)
  (define-key global-map [(shift f10)] 'noop)
  (define-key global-map [(control f10)] 'noop)
  (define-key global-map [(meta f10)] 'noop)
  ;; F11
  (define-key global-map [(f11)] 'other-window-at-end)
  (define-key global-map [(shift f11)] 'noop)
  (define-key global-map [(control f11)] 'switch-to-windowless-buffer)
  (define-key global-map [(meta f11)] 'other-window-at-end)
  ;; F12
  (define-key global-map [(f12)] 'other-window)
  (define-key global-map [(shift f12)] 'noop)
  (define-key global-map [(control f12)] 'noop)
  (define-key global-map [(meta f12)] 'noop)
  ;; Print Screen
  (define-key global-map [(print)] 'ps-print-buffer)
  (define-key global-map [(shift print)] 'noop)
  (define-key global-map [(control print)] 'font-lock-mode)
  (define-key global-map [(meta print)] 'noop) ; unavailable under PCXware
  (define-key global-map [(meta next)] 'font-lock-maximum-size-cycle) ; meta next == meta next
  ;; Scroll Lock (scroll_lock)
  (define-key global-map [(scroll_lock)] 'font-lock-mode)
  (define-key global-map [(scroll-lock)] 'font-lock-mode)
  (define-key global-map [(shift scroll_lock)] 'noop)
  (define-key global-map [(control scroll_lock)] 'noop)
  (define-key global-map [(meta scroll_lock)] 'x-switch-font)
  (define-key global-map [(meta scroll-lock)] 'x-switch-font)
  ;; Pause
  (define-key global-map [(pause)] 'compare-windows-from-eol)
  (define-key global-map [(shift pause)] 'noop)
  (define-key global-map [(control pause)] 'noop)
  (define-key global-map [(meta pause)] 'noop)

  ;; ============
  ;; Right keypad
  ;; ============
  (define-key global-map [(insert)] 'repeat-complex-command)
  (define-key global-map [(meta insert)] 'undo)
  ;; DEL
  (define-key global-map [(home)] 'beginning-of-buffer)
  (define-key global-map [(end)] 'end-of-buffer)
  (define-key global-map [(prior)] 'scroll-down)
  (define-key global-map [(next)] 'scroll-up)

  ;; =============
  ;; Arrow Cluster
  ;; =============
  (define-key global-map [(up)] 'previous-line)
  (define-key global-map [(control up)] 'scroll-down-1)
  (define-key global-map [(down)] 'next-line)
  (define-key global-map [(control down)] 'scroll-up-1)
  (define-key global-map [(left)] 'backward-char)
  (define-key global-map [(right)] 'forward-char)

      ;;
      ;; Right keypad
      ;;

      ;; Print Screen
      (define-key global-map [(f22)] 'print-buffer) 
      (define-key global-map [(control f22)] 'font-lock-mode)
      (define-key global-map [(meta f22)] 'font-lock-maximum-size-cycle)
      (define-key global-map [(shift f22)] 'noop)
      
      ;; Pause
      (define-key global-map [(f23)] 'keyboard-quit);; Break

      ;; Home
      (define-key global-map [(f27)] 'beginning-of-line);; Home
      (define-key global-map [(control f27)] 'beginning-of-buffer);; Home

      ;; Page Up
      (define-key global-map [(f29)] 'scroll-down);; PgUp
      (define-key global-map [(control f29)] 'scroll-other-window-down);; PgUp

      ;; Page Down
      (define-key global-map [(f35)] 'scroll-up);; PgDn
      (define-key global-map [(control f35)] 'scroll-other-window);; PgDn

      ;; Up Arrow
      (define-key global-map [(up)] 'previous-line)

      ;; Down Arrow
      (define-key global-map [(down)] 'next-line)

      ;; Left-Arrow
      (define-key global-map [(left)] 'backward-char)
      (define-key global-map [(control left)] 'backward-word)

      ;; Right Arrow
      (define-key global-map [(right)] 'forward-char)
      (define-key global-map [(control right)] 'forward-word)

      ;; End
      (define-key global-map [(r13)] 'end-of-line)
      (define-key global-map [(control r13)] 'end-of-buffer)

      ;; Insert
      (define-key global-map [(insert)] 'template-moded)
      (define-key global-map [(meta insert)] 'template-moded-overwrite)

      ;; Keypad Insert
      (define-key global-map [(kp-insert)] 'template-moded)
      (define-key global-map [(meta kp-insert)] 'template-moded-overwrite)

      ;; []
      (define-key global-map [(f31)] 'move-to-window-line)
      
      )

;; for function keys
;;   haven't bothered to figure this one out yet...  I was hoping that
;;   it was just a negative argument to scroll-other-window, but I
;;   couldn't find anything in the documentation...
;(defun scroll-other-window-down ()
;  (interactive)
;  (scroll-other-window (- 0 [number of lines in other-window])))

(defun find-emacs-new-screen () ;; for props key
  (interactive)
  (find-file-new-screen "~/.emacs"))

(defun find-Xdefs-new-screen () 
  (interactive)
  (find-file-new-screen "~/.Xdefaults"))

(defun noop ()
  (interactive)
  (message "noop"))


(defun compare-windows-from-eol ()
  (interactive)
  (end-of-line)
  (other-window 1)
  (end-of-line)
  (other-window -1)
  (compare-windows nil)
  (other-window 1)
  (message "here...")
  (sit-for 2)
  (other-window -1)
  (message "here...and here.")
  )

(defun switch-to-windowless-buffer (&optional buffer-list)
  (interactive)
  (if (null buffer-list)
      (setq buffer-list (buffer-list)))

  (let ((first-buf (car buffer-list))
	(rest-list (cdr buffer-list)))
    (cond ((or (get-buffer-window first-buf)
	       (string-match "Minibuf" (buffer-name first-buf))
	       (string-match "*Buffer List*" (buffer-name first-buf))
	       (string-match "trace of POP session" (buffer-name first-buf))
	       (null (y-or-n-p (format "Switch to %s? " first-buf)))
	       )
	   (if rest-list
	       (switch-to-windowless-buffer rest-list)
	     (message "No more candidates.")))
	  (t
	   (switch-to-buffer first-buf)))))

