;; -*- Mode: Emacs-Lisp -*-

;;; nice xemacs defaults

;; Options Menu Settings
;; =====================
(setq options-file-xemacs-version '(19 15))
(setq-default case-fold-search t)
(setq-default overwrite-mode nil)
(setq-default case-fold-search t)
(setq-default case-replace t)
(setq-default zmacs-regions t)
(setq-default mouse-yank-at-point nil)
(setq-default require-final-newline nil)
(setq-default next-line-add-newlines nil)
(setq-default teach-extended-commands-p t)
(setq-default teach-extended-commands-timeout 2)
(setq-default debug-on-error nil)
(setq-default debug-on-quit nil)
(setq-default lpr-switches nil)
(setq-default ps-print-color-p t)
(setq-default ps-paper-type 'letter)
(setq-default get-frame-for-buffer-default-instance-limit nil)
(setq-default temp-buffer-show-function 'show-temp-buffer-in-current-frame)
(setq-default font-lock-auto-fontify t)
(setq-default font-lock-use-fonts nil)
(setq-default font-lock-use-colors '(color))
(setq-default font-lock-maximum-decoration nil)
(setq-default font-lock-maximum-size 256000)
(setq-default font-lock-mode-enable-list nil)
(setq-default font-lock-mode-disable-list nil)
(require 'font-lock)
(remove-hook 'font-lock-mode-hook 'turn-on-fast-lock)
(remove-hook 'font-lock-mode-hook 'turn-on-lazy-lock)
(if (featurep 'scrollbar) (progn (add-spec-list-to-specifier scrollbar-width 'nil) (add-spec-list-to-specifier scrollbar-height 'nil)))
(add-spec-list-to-specifier modeline-shadow-thickness '((global (nil . 2))))
(setq-default truncate-lines nil)
(setq-default bar-cursor nil)
(setq-default buffers-menu-max-size 25)
(setq-default complex-buffers-menu-p nil)
(setq-default buffers-menu-sort-function 'sort-buffers-menu-by-mode-then-alphabetically)
(setq-default buffers-menu-grouping-function 'group-buffers-menu-by-mode-then-alphabetically)
(setq-default buffers-menu-submenus-for-groups-p nil)
(setq-default font-menu-ignore-scaled-fonts t)
(setq-default font-menu-this-frame-only-p nil)
(if (featurep 'toolbar) (progn (set-default-toolbar-position 'top) (add-spec-list-to-specifier default-toolbar-visible-p (if eoe-use-toolbars '((global (nil . t))) '((global (nil))))) (add-spec-list-to-specifier toolbar-buttons-captioned-p 'nil)))
(setq-default mouse-avoidance-mode nil)
;; set in .emacs19x file
;; (setq-default browse-url-browser-function 'browse-url-w3)
    
;; from 19.13
(cond
 ((and (string-match "XEmacs" emacs-version)
       (boundp 'emacs-major-version)
       (= emacs-major-version 21)
       (>= emacs-minor-version 1))
  ;; ---------------------
  ;; basic faces overrides
  ;; ---------------------
  (set-face-foreground 'default '((global (nil . "green"))))
  (set-face-background 'default '((global (nil . "black"))))
  (set-face-foreground 'modeline '((global (nil . "black"))))
  (set-face-background 'modeline '((global (nil . "gray"))))
  (set-face-foreground 'bold '((global (nil . "yellow"))))
  (set-face-foreground 'italic '((global (nil . "orange"))))
  (set-face-foreground 'bold-italic '((global (nil . "white"))))
  (set-face-foreground 'highlight '((global (nil . "white"))))
  (set-face-background 'highlight '((global (nil . "blue"))))
  (set-face-foreground 'primary-selection '((global (nil . "black"))))
  (set-face-foreground 'secondary-selection '((global (nil . "black"))))
  (set-face-foreground 'isearch '((global (nil . "black"))))
  (set-face-foreground 'zmacs-region '((global (nil . "black"))))
  ;; ------------------------
  ;; list-mode face overrides
  ;; ------------------------
  (set-face-foreground 'list-mode-item-selected '((global (nil . "black"))))
  ;; --------------------
  ;; shell face overrides
  ;; --------------------
  (require 'shell)
  (set-face-foreground 'shell-output-face '((global (nil . "green"))))
  (set-face-foreground 'shell-prompt-face '((global (nil . "white"))))
  ;; -------------------------
  ;; shell-font face overrides
  ;; -------------------------
  (require 'shell-font)
  (set-face-foreground 'shell-input '((global (nil . "yellow"))))
  (set-face-foreground 'shell-prompt '((global (nil . "white"))))
  ;; ---------------------
  ;; comint face overrides
  ;; ---------------------
  (require 'comint-xemacs)
  (set-face-foreground 'comint-input-face '((global (nil . "yellow"))))
  ;; --------------------
  ;; dired face overrides
  ;; --------------------
  (require 'dired)
  (set-face-foreground 'dired-face-permissions '((global (nil . "green"))))
  (set-face-background 'dired-face-permissions '((global (nil . "black"))))
  (set-face-foreground 'dired-face-executable '((global (nil . "palegreen"))))
  (set-face-foreground 'dired-face-directory '((global (nil . "yellow"))))
  (set-face-foreground 'dired-face-boring '((global (nil . "green"))))
  ;; ------------------------
  ;; font-lock face overrides
  ;; ------------------------
  (require 'font-lock)
  (set-face-foreground 'font-lock-variable-name-face '((global (nil . "LightBlue"))))
  (set-face-foreground 'font-lock-function-name-face '((global (nil . "Cyan"))))
  (set-face-foreground 'font-lock-doc-string-face '((global (nil . "Khaki"))))
  (set-face-foreground 'font-lock-string-face '((global (nil . "Khaki"))))
  (set-face-foreground 'font-lock-type-face '((global (nil . "Orange"))))
  (set-face-foreground 'font-lock-keyword-face '((global (nil . "LightGray"))))
  (set-face-foreground 'font-lock-preprocessor-face '((global (nil . "Yellow"))))
  (set-face-foreground 'font-lock-reference-face '((global (nil . "PaleTurquoise"))))
  ;; ----------------------
  ;; message face overrides
  ;; ----------------------
  (require 'message)
  (require 'highlight-headers)
  (set-face-foreground 'message-separator-face '((global (nil . "white"))))
  (set-face-foreground 'message-headers '((global (nil . "yellow"))))
  (set-face-foreground 'message-header-contents '((global (nil . "orange"))))
  (set-face-foreground 'message-header-xheader-face '((global (nil . "green"))))
  (set-face-foreground 'message-header-name-face '((global (nil . "green"))))
  (set-face-foreground 'message-header-cc-face '((global (nil . "green"))))
  (set-face-foreground 'message-highlighted-header-contents '((global (nil . "white"))))
  ;; ---------------
  ;; gui-button-face
  ;; ---------------
  (and (fboundp 'make-face) (make-face 'gui-button-face))
  (set-face-foreground 'gui-button-face "red")
  (set-face-background 'gui-button-face "black")

  ;; -------------------
  ;; gnus face overrides
  ;; -------------------
  (require 'gnus-art)
  (set-face-foreground 'gnus-header-from-face '((global (nil . "SpringGreen"))))
  (set-face-foreground 'gnus-header-subject-face '((global (nil . "white"))))
  (set-face-foreground 'gnus-header-newsgroups-face '((global (nil . "SeaGreen3"))))
  (set-face-foreground 'gnus-header-name-face '((global (nil . "yellow"))))
  (set-face-foreground 'gnus-header-content-face '((global (nil . "orange"))))
  (set-face-foreground 'gnus-summary-selected-face '((global (nil . "yellow"))))
  (set-face-underline-p 'gnus-summary-selected-face nil)
  ))

;; ============================
;; End of Options Menu Settings
